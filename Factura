import datetime

class Factura:
    # Atributul de serie va fi constant pentru toate facturile
    serie = "X123"

    def __init__(self, numar, nume_produs, cantitate, pret_buc):
        self.numar = numar
        self.nume_produs = nume_produs
        self.cantitate = cantitate
        self.pret_buc = pret_buc

    def schimba_cantitatea(self, cantitate):
        self.cantitate = cantitate

    def schimba_pretul(self, pret):
        self.pret_buc = pret

    def schimba_nume_produs(self, nume):
        self.nume_produs = nume

    def genereaza_factura(self):
        data_azi = datetime.date.today()
        total = self.cantitate * self.pret_buc

        print(f"Factura seria {self.serie} numărul {self.numar}")
        print(f"Data: {data_azi}")
        print("\nProdus        | Cantitate | Preț bucată | Total")
        print(f"{self.nume_produs.ljust(14)}| {str(self.cantitate).center(10)} | {str(self.pret_buc).center(12)} | {str(total).center(5)}")


# Exemplu de utilizare:
factura1 = Factura(1, "Telefon", 7, 700)
factura1.genereaza_factura()
În acest exemplu, am creat clasa Factura cu atributele numar, nume_produs, cantitate și pret_buc. Am definit un atribut constant serie. Constructorul __init__ primește toate atributele, cu excepția seriei, care este predefinită pentru toate facturile.

Am implementat metodele schimba_cantitatea, schimba_pretul și schimba_nume_produs pentru a permite modificarea acestor atribute.

Metoda genereaza_factura calculează data curentă și calculează totalul pentru factura. Apoi, afișează factura sub forma unui tabel.

În exemplul de utilizare, am creat o factură factura1 cu numărul 1, numele produsului "Telefon", o cantitate de 7 bucăți și un preț de 700 RON/bucată. Apoi, am generat factura utilizând metoda genereaza_factura.

Rezultatul afișat va fi:

yaml
Copy code
Factura seria X123 numărul 1
Data: 2023-10-19

Produs         | Cantitate | Preț bucată | Total
Telefon        |     7      |    700     | 4900 
